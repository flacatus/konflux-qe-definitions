---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-artifacts-deprovision-rosa
spec:
  params:
    - name: test-name
      type: string
      description: The name of the test being executed.
    - name: ocp-login-command
      type: string
      description: Command to log in to the OpenShift cluster.
    - name: oras-container
      type: string
      description: The ORAS container registry URI to store artifacts.
    - name: pull-request-author
      type: string
      description: The GitHub username of the pull request author.
    - name: git-revision
      type: string
      description: The Git revision (commit SHA) of the current build.
    - name: pull-request-number
      type: string
      description: The number of the GitHub pull request.
    - name: git-repo
      type: string
      description: The name of the GitHub repository.
    - name: git-org
      type: string
      description: The GitHub organization or user that owns the repository.
    - name: cluster-name
      type: string
      description: The name of the OpenShift cluster to be deleted.
    - name: konflux-test-infra-secret
      type: string
      description: The name of secret where testing infrastructures credentials are stored.
    - name: cloud-credential-key
      type: string
      description: The key secret from konflux-test-infra-secret where all AWS ROSA configurations are stored.
    - name: pipeline-aggregate-status
      type: string
      description: Contains status of a pipeline(Succeeded, Failed, Completed, None)
      default: None
  volumes:
    - name: konflux-test-infra-volume
      secret:
        secretName: "$(params.konflux-test-infra-secret)"
  steps:
    - name: collect-artifacts
      workingDir: /workspace/cluster-artifacts
      onError: continue
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      script: |
        #!/bin/sh
        $(params.ocp-login-command)

        if [[ $(params.pipeline-aggregate-status) == "Succeeded" ]]; then
          echo "[INFO]: Pipeline finished successfully. Skipping artifacts collection..."
          exit 0
        fi

        curl -sSL https://raw.githubusercontent.com/konflux-ci/konflux-qe-definitions/main/scripts/gather-extra.sh | bash
    - name: inspect-upload-artifacts
      workingDir: /workspace
      onError: continue
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        #!/bin/sh

        if [[ $(params.pipeline-aggregate-status) == "Succeeded" ]]; then
          echo "[INFO]: Pipeline finished successfully. Skipping artifacts inspection..."
          exit 0
        fi

        trufflehog filesystem /workspace --only-verified --fail
        EXIT_CODE=$?

        if [ $EXIT_CODE -ne 0 ]; then
          echo "[ERROR] Found secrets in artifacts... Container artifacts will not be uploaded to oci registry due to security reasons."
          exit 0
        fi

        export QUAY_USERNAME QUAY_TOKEN

        QUAY_USERNAME=$(jq -r '."quay-username"' /usr/local/konflux-test-infra/oci-storage)
        QUAY_TOKEN=$(jq -r '."quay-token"' /usr/local/konflux-test-infra/oci-storage)

        oras login -u $QUAY_USERNAME -p $QUAY_TOKEN quay.io

        echo '{"doc": "README.md"}' > config.json
        oras pull "$(params.oras-container)"
        oras push "$(params.oras-container)" --config config.json:application/vnd.acme.rocket.config.v1+json \
          ./:application/vnd.acme.rocket.docs.layer.v1+tar
    - name: deprovision-rosa
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        set -o errexit
        set -o nounset
        set -o pipefail

        export CLUSTER_NAME REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY ROSA_TOKEN

        CLUSTER_NAME=$(params.cluster-name)
        REGION=$(jq -r '.aws["region"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_ACCESS_KEY_ID=$(jq -r '.aws["access-key-id"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_SECRET_ACCESS_KEY=$(jq -r '.aws["access-key-secret"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        ROSA_TOKEN=$(jq -r '.aws["rosa-hcp"]["rosa-token"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))

        config_aws_creds() {
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region "$REGION"
        }

        if [[ -n "$CLUSTER_NAME"  ]]; then
            echo "INFO: [$(date +"%Y/%m/%d %H:%M:%S")] Started to destroy cluster [$CLUSTER_NAME]..."

            printf "INFO: Logging in to your Red Hat account...\n"
            config_aws_creds
            rosa login --token="$ROSA_TOKEN"

            # Trigger the deletion of the cluster without waiting for it to be completely deleted
            rosa delete cluster --region "$REGION" --cluster="$CLUSTER_NAME" -y

        else
            echo "INFO: No OCP cluster needs to be destroyed."
        fi

        echo "INFO: [$(date +"%Y/%m/%d %H:%M:%S")] Done"
    - name: remove-tag-from-subnets
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        set -o errexit
        set -o nounset
        set -o pipefail

        CLUSTER_NAME=$(params.cluster-name)
        REGION=$(jq -r '.aws["region"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_ACCESS_KEY_ID=$(jq -r '.aws["access-key-id"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_SECRET_ACCESS_KEY=$(jq -r '.aws["access-key-secret"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        ROSA_TOKEN=$(jq -r '.aws["rosa-hcp"]["rosa-token"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        SUBNET_IDS=$(jq -r '.aws["rosa-hcp"]["subnets-ids"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))

        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region "$REGION"

        echo "INFO: [$(date +"%Y/%m/%d %H:%M:%S")] Started to remove tags of cluster [$CLUSTER_NAME]..."

        printf "INFO: Logging in to your Red Hat account...\n"
        rosa login --token="$ROSA_TOKEN"

        if [[ -n "$CLUSTER_NAME"  ]]; then
            cluster_id=$(rosa --region "$REGION"  describe cluster --cluster="$CLUSTER_NAME" -o json | jq -r .id)
            echo "INFO: Cluster ID: $cluster_id"

            echo "INFO: Removing tag from subnets [$SUBNET_IDS]..."
            new_subnet_ids="${SUBNET_IDS//,/ }"
            aws --region "$REGION" ec2 delete-tags --resources $new_subnet_ids --tags Key="kubernetes.io/cluster/${cluster_id}"

            echo "INFO: [$(date +"%Y/%m/%d %H:%M:%S")] Done"
        else
          echo "INFO: No OCP cluster tag needs to be removed."
        fi
    - name: remove-load-balancers
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        set -o errexit
        set -o nounset
        set -o pipefail

        export CLUSTER_NAME REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

        CLUSTER_NAME=$(params.cluster-name)
        REGION=$(jq -r '.aws["region"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_ACCESS_KEY_ID=$(jq -r '.aws["access-key-id"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_SECRET_ACCESS_KEY=$(jq -r '.aws["access-key-secret"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))

        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region "$REGION"

        echo "INFO: [$(date +"%Y/%m/%d %H:%M:%S")] Started to remove load balancers of cluster [$CLUSTER_NAME]..."

        ELB_TAG_KEY="api.openshift.com/name"
        ELB_TAG_VALUE=$(params.cluster-name)

        # Get all load balancer ARNs
        all_arns=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[*].LoadBalancerArn' --output text)

        # Process the ARNs in batches of 20 to avoid errors like:
        # An error occurred (ValidationError) when calling the DescribeTags operation:
        # Cannot have more than 20 resources described

        batch_size=20
        arns_to_delete=()

        for arn in $all_arns; do
            arns_to_delete+=($arn)
            
            if [ ${#arns_to_delete[@]} -eq $batch_size ]; then
                aws elbv2 describe-tags --resource-arns ${arns_to_delete[@]} \
                --query "TagDescriptions[?Tags[?Key=='$ELB_TAG_KEY' && Value=='$ELB_TAG_VALUE']].ResourceArn" --output text | while read matched_arn; do
                    echo "Deleting load balancer with ARN: $matched_arn"
                    aws elbv2 delete-load-balancer --load-balancer-arn $matched_arn
                done
                arns_to_delete=()
            fi
        done
